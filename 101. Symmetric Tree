PROBLEM:
Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).


SOLUTION:

USING DFS:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root == NULL){
            return true;
        }
        return dfs(root->left,root->right);
    }
    bool dfs(TreeNode* leftNode,TreeNode* rightNode){
        if((rightNode == NULL) && (leftNode == NULL)){
            return true;
        }
        if(rightNode == NULL || leftNode == NULL){
            return false;
        }
        if(rightNode->val != leftNode->val){
            return false;
        }
        return dfs(leftNode->left,rightNode->right) && dfs(leftNode->right,rightNode->left);
        
    }
};
