Problem:
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Solution:

class Solution {
public:
    int firstIndex(vector<int>& nums, int low,int high,int target,int l){
        if(low>high){
            return l;
        }
        int mid=low+(high-low)/2;
        if (nums[mid]==target){
            l=mid;
            return firstIndex(nums,low,mid-1,target,l);
        }
        else if(nums[mid]<target){
            return firstIndex(nums,mid+1,high,target,l);
        }
        else{
            return firstIndex(nums,low,mid-1,target,l);
        }
        
        return l;
    }
    int lastIndex(vector<int>& nums, int low,int high,int target,int r){
        if(low>high){
            return r;
        }
        int mid=low+(high-low)/2;
        if (nums[mid]==target){
            r=mid;             
            return lastIndex(nums,mid+1,high,target,r);    
        }
        else if(nums[mid]<target){
            return lastIndex(nums,mid+1,high,target,r);
        }
else{
            return lastIndex(nums,low,mid-1,target,r);
            
        }
        
        return r;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int low=0;
        int high=nums.size()-1;
        int l=-1,r=-1;
        l= firstIndex(nums,low,high,target,l);
        r= lastIndex(nums,low,high,target,r);
        return {l,r};
    }
};
