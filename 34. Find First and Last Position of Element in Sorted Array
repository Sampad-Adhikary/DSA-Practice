Problem:
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Solution:

class Solution {
class Solution {
public:

    int firstIndex(vector<int>& nums, int target,int low,int high,int buff1){
        if(low>high){
            return buff1;
        }
        int mid = low + (high-low)/2;
        if(nums[mid] == target){
            buff1 = mid;
            return firstIndex(nums,target,low,mid-1,buff1);
        }
        else if(nums[mid]<target){
            return firstIndex(nums,target,mid+1,high,buff1);
        }
        else{
            return firstIndex(nums,target,low,mid-1,buff1);
        }
        return buff1;
    }

    int lastIndex(vector<int>& nums, int target,int low,int high,int buff){
        if(low>high){
            return buff;
        }
        int mid = low + (high-low)/2;
        if(nums[mid] == target){
            buff = mid;
            return lastIndex(nums,target,mid+1,high,buff);
        }
        else if(nums[mid]<target){
            return lastIndex(nums,target,mid+1,high,buff);
        }
        else{
            return lastIndex(nums,target,low,mid-1,buff);
        }
        return buff;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        int low = 0;
        int high = nums.size()-1;
        int lIndex = firstIndex(nums,target,low,high,-1);
        int rIndex = lastIndex(nums,target,low,high,-1);
        return {lIndex,rIndex};
        

    }
};
