PROBLEM:
Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.

Two nodes of a binary tree are cousins if they have the same depth with different parents.

Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.

 


SOLUTION:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode *xparent;
    TreeNode *yparent;
    int xlvl, ylvl;
    
public:
    bool isCousins(TreeNode* root, int x, int y) {
        if(root == NULL){
            return false;
        }
        xparent = yparent = NULL;
        xlvl = ylvl = 0;
        dfs(root,x,y,0,NULL);
        return (xlvl == ylvl && xparent != yparent);
    }
    void dfs(TreeNode* root,int x,int y,int lvl,TreeNode* parent){
        if(root == NULL){
            return;
        }
        if(root->val == x){
            xlvl = lvl;
            xparent = parent;
        }
        if(root->val == y){
            ylvl = lvl;
            yparent = parent;
        }
        dfs(root->left,x,y,lvl+1,root);
        dfs(root->right,x,y,lvl+1,root);
    }
};
