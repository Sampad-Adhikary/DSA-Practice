PROBLEM:
You are given an integer array nums and two integers minK and maxK.

A fixed-bound subarray of nums is a subarray that satisfies the following conditions:

The minimum value in the subarray is equal to minK.
The maximum value in the subarray is equal to maxK.
Return the number of fixed-bound subarrays.

A subarray is a contiguous part of an array.

Example 1:

Input: nums = [1,3,5,2,7,5], minK = 1, maxK = 5
Output: 2
Explanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2].




SOLUTION:

class Solution {
public:
    long long countSubarrays(vector<int>& nums, int minK, int maxK) {
        int length = nums.size();
        int left = -1;
        int latestMin = -1;
        int latestMax = -1;
        long long count = 0;
        for(int i=0;i<length;i++){
            if(nums[i]>=minK && nums[i]<=maxK){
                latestMin = (nums[i] == minK)?i:latestMin;
                latestMax = (nums[i] == maxK)?i:latestMax;
                count += max(0,min(latestMin,latestMax)-left);
            }
            else{
                left = i;
                latestMin = -1;
                latestMax = -1;
            }
        }
        return count;
    }
};
