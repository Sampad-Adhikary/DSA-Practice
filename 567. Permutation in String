Problem:
567. Permutation in String

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.
Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Solution: USING SLIDING WINDOW TECHNIQUE

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        vector<int> hashS1(26,0);    
        vector<int> hashS2(26,0);
        int len1 = s1.size();
        int len2 = s2.size();

        if(len1>len2){
            return false;
        }

        int left = 0,right = 0;
        while(right<len1){
            hashS1[s1[right]-'a'] += 1;  //s1[i] - 'a' gives the index in string and and returns a character which then becomes the index in the array hashS1
            hashS2[s2[right]-'a'] += 1;
            right++;
        }
        right--;
        
        //SLIDING WINDOW
        
        while(right<len2){
            if(hashS1 == hashS2){
                return true;
            }
            right +=1;
            if(right != len2)
                hashS2[s2[right]-'a'] += 1;
            hashS2[s2[left]-'a'] -= 1;
            left+=1;
        }
        return false;

    }
};
